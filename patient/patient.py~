from trytond.model import ModelView, ModelSQL, fields
from trytond.transaction import Transaction
from trytond.pool import Pool, PoolMeta
import copy 
from trytond.wizard import Wizard, StateView, Button, StateTransition
from trytond.report import Report
from trytond.pyson import Eval, Not, Bool, PYSONEncoder, Equal, Date, DateTime, And
import time
##from mx import DateTime
import datetime
#from datetime import datetime
from dateutil.relativedelta import relativedelta

__all__ = ['Patient','User','PatientEmployer','Appointment','Party']
__metaclass__ = PoolMeta

class Patient(ModelSQL, ModelView):
    "Patient"
    __name__ = "patient.patient"
#    patient = fields.Many2One(
#        'gnuhealth.patient', 'Patient', required=False,
#        select=True, help='Patient Name')
#patient = fields.Many2One(
#        'gnuhealth.patient', 'Patient', required=True,
#        select=True, help='Patient Name')
#    @staticmethod
#    def get_patient(self):
#         cursor = Transaction().cursor
#         User = Pool().get('res.user')
#         user = User(Transaction().user)
#         login_user_id = int(user.id)
#         import pdb;pdb.set_trace()
#         return '1'      

class PatientEmployer(ModelSQL, ModelView):
    "PatientEmployer"
    __name__='gnuhealth.patient'

    employer_name=fields.Many2One('party.party','Employer',required=False,
                                   domain=[('is_employer','=',True)],
                                   
                                  help="person associated to this employer")


class User:
    __name__ = 'res.user'
    patient = fields.Many2One('gnuhealth.patient', 'Patient', required=False,  help='Patient Name')

    @classmethod
    def __setup__(cls):
        super(User, cls).__setup__()
        cls._context_fields.insert(0, 'patient')

class Appointment:
    'Patient Appointments'
    __name__ = 'gnuhealth.appointment'
    @classmethod
    def __setup__(cls):
        super(Appointment, cls).__setup__()
        cls._buttons.update({
                'confirmed': {
                    'invisible': And(Not(Equal(Eval('state'), '')),
                        Not(Equal(Eval('state'), 'user_cancelled'))),
                    },
                'cancel': {
                    'invisible': Not(Equal(Eval('state'), 'confirmed')),
                    },
                })

    @classmethod
    @ModelView.button
    def cancel(cls, registrations):
        registration_id = registrations[0]
        cls.write(registrations, {'state': 'user_cancelled'})

    @classmethod
    @ModelView.button
    def confirmed(cls, registrations):
        registration_id = registrations[0]
        cls.write(registrations, {'state': 'confirmed'})

class Party:
    'Party'
    __name__='party.party'
    is_employer=fields.Boolean(
        'Employer',
        states={'invisible':Not(Bool(Eval('is_persion')))},
        help='Check if the party is a employer')


